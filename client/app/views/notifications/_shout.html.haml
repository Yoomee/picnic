%div{:id => "notification_#{notification.id}", :class => "notification #{notification.read? ? 'read' : 'unread'}"}
  .member_image
    -if notification.wall_posts.empty?
      =link_to(image_for(shout.member, "50x50#"), shout.member)
    -else
      =link_to(image_for(notification.wall_post_members.first, "50x50#"), notification.wall_post_members.first)
  .notification_content
    %p
      -if notification.wall_posts.empty?
        ="#{link_to_self(shout.member)} posted"
        =link_to("a #{shout.has_attachable? ? shout.attachable_type.titleize.downcase : 'message'}", shout)
        -if (shout.recipient != logged_in_member) && !(tags = (logged_in_member.tags_subscribed_to & shout.tags.collect(&:to_tag))).empty?
          ="about "
          -tags.each do |tag|
            =link_to_tag(tag, :li => false)
        -elsif shout.recipient.is_a?(Member)
          ="on #{shout.recipient.nil? ? link_to('their profile', shout.member) : link_to("#{full_name_or_your(shout.recipient)} profile", shout.recipient)}."
        -elsif shout.recipient
          ="on #{link_to_self(shout.recipient)}."
      -else
        ="#{member_names_list(notification.wall_post_members, :limit => 1)} commented on"
        ="#{link_to("#{full_name_or_your(shout.member, :owner => (notification.wall_post_members.count > 1 ? nil : shout.member))} discussion", shout_path(shout, :read_notification => true))}."
    %p.posted_when
      ="#{time_ago_in_words(notification.created_at)} ago"
  .delete_link
    =link_to("x", notification, :method => :delete, :confirm => "Are you sure?")